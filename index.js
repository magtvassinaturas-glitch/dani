// =================================================================
// INTEGRA√á√ÉO GEMINI - IN√çCIO (SINTAXE MODERNIZADA)
// =================================================================
import express from 'express';
import bodyParser from 'body-parser';
import { GoogleGenAI } from '@google/genai'; 

const app = express();
app.use(bodyParser.json()); 

// Busca automaticamente a chave na vari√°vel de ambiente GEMINI_API_KEY do Render
const ai = new GoogleGenAI({});

// Este √© o prompt que d√° a personalidade da Dani ao Gemini
const SYSTEM_INSTRUCTION = `
Voc√™ √© Dani, a assistente virtual e atendente prim√°ria da MAGTV. Sua miss√£o √© responder perguntas complexas dos clientes (suporte ou d√∫vidas gerais) com base no hist√≥rico da conversa, mantendo uma personalidade amig√°vel, prestativa e profissional. Voc√™ funciona como um "Smart Fallback" para o bot principal.

REGRAS:
1. NUNCA mencione que voc√™ √© um modelo de linguagem (LLM) ou um programa de IA. Voc√™ √© a Dani.
2. Use emojis de forma amig√°vel (üòä, üëç, üëã).
3. A MAGTV n√£o √© compat√≠vel com iOS (iPhone/iPad). Se perguntarem, informe de forma educada e sugira Android.
4. Se for perguntado sobre valores ou PIX, responda com os dados fixos: Plano Mensal R$ 30,00, PIX 94 98444-5961 (Davi Eduardo Borges).
`;

// Fun√ß√£o ass√≠ncrona para chamar o Gemini
async function callGemini(queryText, userName) {
    const userPrompt = `${userName ? `O cliente ${userName} disse: ` : 'O cliente disse: '}` + queryText;
    
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: userPrompt,
            config: {
                systemInstruction: SYSTEM_INSTRUCTION,
                temperature: 0.5,
            },
        });
        
        // Retorna a resposta de texto
        return response.text || "Desculpe, a Dani n√£o conseguiu gerar uma resposta agora. Tente novamente.";
        
    } catch (error) {
        console.error("Erro ao chamar o Gemini:", error);
        return "Desculpe, a Dani est√° com problemas t√©cnicos no momento. Por favor, tente novamente mais tarde.";
    }
}
// =================================================================
// INTEGRA√á√ÉO GEMINI - FIM
// =================================================================

// CONFIGURA√á√ïES E CONSTANTES
const PIX_KEY = "94 98444-5961";
const PIX_NAME = "Davi Eduardo Borges";
const PLAN_VALUE = "R$ 30,00";
const CODE_DOWNLOADER = "6519181"; // Seu c√≥digo
const SITE_RUSH = "https://rush.ninja/";

// =================================================================
// LISTA DE FRASES DA DANI (SAUDA√á√ÉO AP√ìS CAPTURA DE NOME)
// =================================================================
const frasesDani = [
    (nome) => `Ol√° ${nome}! Seja muito bem-vindo(a) √† MAGTV! Meu nome √© Dani.`, 
    (nome) => `Ol√° ${nome}! Que bom que voc√™ veio! üòä Eu sou a Dani, da MAGTV.`, 
    (nome) => `Ol√° ${nome}! Eu sou a Dani, atendente da MAGTV. √â um prazer falar com voc√™! üòä`,
    (nome) => `Uau! Que bom que voc√™ veio ${nome}! Eu sou a Dani, a sua assistente na MAGTV! Estou super animada para te ajudar hoje!`,
    (nome) => `Ah, que √≥timo te ver por aqui ${nome}! Pode contar comigo, a Dani! Meu objetivo √© deixar tudo mais f√°cil para voc√™ na MAGTV!`,
    (nome) => `Seja muito, muito bem-vindo(a) ${nome}! Voc√™ est√° falando com a Dani, e eu cuido de tudo por aqui na MAGTV com o maior prazer!`,
    (nome) => `Ol√° ${nome}! √â a Dani quem est√° te atendendo na MAGTV! √â um prazer!`
];
// =================================================================
// LISTA DE VARIA√á√ïES PARA O PITCH DE VENDAS (MENU PRINCIPAL - N1)
// =================================================================
const vendasDani = [
    // Varia√ß√£o 1
    (formattedFirstName, PLAN_VALUE) => [
        `Que maravilha, ${formattedFirstName}! Fico muito feliz que voc√™ queira fazer parte da fam√≠lia MAGTV! ü•≥`,
        `Deixa eu te contar um pouco sobre o nosso plano: O **Mensal** custa apenas **R$ ${PLAN_VALUE}**.`,
        `Ele inclui acesso a mais de **2.000 canais**, **20 mil filmes**, **16 mil s√©ries** e desenhos para toda a fam√≠lia! √â conte√∫do que n√£o acaba mais! üöÄ`,
        `Compatibilidade: Funciona perfeitamente em Smart TVs (Samsung, LG, Roku via IPTV) e dispositivos Android (Celulares, TV Box, Android TV) com nosso app exclusivo.`,
        `‚ö†Ô∏è Importante: *N√£o funciona em iOS* (iPhone/iPad).`,
        `Para te ajudar com a instala√ß√£o, preciso de uma informa√ß√£o rapidinha: Voc√™ vai usar o servi√ßo em SMARTV,TV BOX, ANDROIDTV, ROKU TV ou Celular ${formattedFirstName}? Assim eu j√° te mando o tutorial certinho! üòâ`
    ],
    // Varia√ß√£o 2
    (formattedFirstName, PLAN_VALUE) => [
        `Uau! √ìtima escolha, ${formattedFirstName}! √â um prazer ter voc√™!`,
        `Nosso plano de assinatura √© o **Mensal**, por um valor fixo de **R$ ${PLAN_VALUE}** (sem surpresas!).`,
        `O que voc√™ leva? Um cat√°logo completo com mais de **2.000 canais**, al√©m de **20.000 filmes** e **16.000 s√©ries** atualizadas semanalmente.`,
        `Onde voc√™ pode usar? Em qualquer Smart TV compat√≠vel (Samsung, LG, Roku) e todos os Androids (TV Box, Celular) usando a tecnologia P2P do nosso app.`,
        `üõë Aviso: O servi√ßo **n√£o √© compat√≠vel com aparelhos iOS** (iPhone/iPad).`,
        `Pronto para o teste? Antes, preciso saber: Qual a marca do seu dispositivo ${formattedFirstName}? Assim j√° te envio o tutorial exato! üì∫`
    ]
    // OBS: Deixei apenas duas varia√ß√µes para manter o c√≥digo limpo. Por favor, adicione suas outras 6 varia√ß√µes de volta aqui se necess√°rio.
];
// =================================================================


// Fun√ß√µes para converter o ARRAY de mensagens em uma √öNICA STRING para o AutoResponder
const arrayToFulfillmentText = (messages) => {
    // Junta as mensagens com duas quebras de linha para formatar bem no WhatsApp
    return messages.join('\n\n');
};


// =================================================================
// FUN√á√ÉO PARA GERAR A SAUDA√á√ÉO PERSONALIZADA E O MENU
// =================================================================
const getPersonalizedMenu = (nomeCliente) => {
    
    // Formata o nome para usar apenas o primeiro nome com a primeira letra mai√∫scula
    const nomeFormatado = nomeCliente.split(' ')[0].charAt(0).toUpperCase() + nomeCliente.split(' ')[0].slice(1).toLowerCase();
    
    // Escolhe uma sauda√ß√£o aleat√≥ria
    const indexAleatorio = Math.floor(Math.random() * frasesDani.length);
    let saudacao = frasesDani[indexAleatorio](nomeFormatado);

    const menuPrincipal = `
Como posso te ajudar hoje? Por favor, escolha uma das op√ß√µes abaixo:

1Ô∏è‚É£ Novo Cliente
2Ô∏è‚É£ Pagamento
3Ô∏è‚É£ Suporte
    `;

    return [saudacao, menuPrincipal]; // Retorna ARRAY de Strings
};

// =================================================================
// FUN√á√ÉO PARA GERAR O PITCH DE VENDAS ALEAT√ìRIO
// =================================================================
const getVendasPitch = (nomeCliente, PLAN_VALUE) => {
    
    // 1. Formata o primeiro nome do cliente
    const firstName = nomeCliente.split(' ')[0];
    const formattedFirstName = firstName.charAt(0).toUpperCase() + firstName.slice(1).toLowerCase();

    // 2. Escolhe uma varia√ß√£o aleat√≥ria
    const indexAleatorio = Math.floor(Math.random() * vendasDani.length);
    const pitchFunction = vendasDani[indexAleatorio];

    // 3. Executa a fun√ß√£o do pitch
    return pitchFunction(formattedFirstName, PLAN_VALUE); // Retorna ARRAY de Strings
};
// =================================================================
// FUN√á√ïES REUTILIZ√ÅVEIS PARA TUTORIAIS (Implementa√ß√µes completas)
// =================================================================

// 1. TUTORIAL SMART TV (SAMSUNG / LG)
const getSmartTVInstallTutorial = () => {
    return [
        "üì∫ Como instalar o XCloud TV na sua TV",
        "Siga as instru√ß√µes abaixo para a marca da sua TV e comece a assistir.",
        "Passo a passo para TVs *Samsung e LG*.",
        "1. Aperte o bot√£o Home no controle remoto para abrir a tela principal.",
        "2. Navegue at√© a loja de aplicativos (geralmente identificada por um √≠cone de sacola de compras ou uma lupa de busca).",
        "3. Use o campo de pesquisa e digite *\"XCloud TV\"*.",
        "4. Selecione o aplicativo e clique em *Instalar* (ou Baixar). Quando a instala√ß√£o estiver conclu√≠da, clique em *Abrir*.",
        "5. Agora √© s√≥ inserir seu login e senha para acessar todo o conte√∫do.",
        "Envie a palavra **TESTE** para enviarmos o seu acesso!"
    ];
};

// 2. TUTORIAL ROKU
const getRokuInstallTutorial = () => {
    return [
        "üì∫ Como instalar o XCloud TV na sua TV",
        "Passo a passo para *Sistema Roku TV*:",
        "1. Aperte o bot√£o Home no controle remoto üéö",
        "2. V√° at√© *Canais de Streaming* na tela principal.",
        "3. Selecione a op√ß√£o *Procurar Canais*.",
        "4. No campo de busca, digite *\"XCloud TV\"*.",
        "5. Selecione o aplicativo e clique em *Adicionar Canal*.",
        "6. Aguarde a instala√ß√£o e clique em *Ir para o canal*.",
        "Por fim, envie a palavra **TESTE** para enviarmos o seu login e senha!"
    ];
};

// 3. TUTORIAL ANDROID TV / TV BOX
const getAndroidTVInstallTutorial = () => {
    return [
        "üì∫ Tutorial para Android TV (TV Box)",
        "1. Como Instalar o Aplicativo P2P Rush Original.",
        "2. Na sua Android TV, acesse a *Play Store*.",
        "3. Se for Google TV, a Play Store fica nas configura√ß√µes na aba de apps!",
        "4. Ap√≥s abrir o Play Store, procure pelo aplicativo chamado *\"Downloader\"* e clique em *Instalar*.",
        "5. Abra o aplicativo Downloader.",
        "6. No campo para digitar, coloque o c√≥digo: **" + CODE_DOWNLOADER + "** e clique em Go.",
        "7. Se o aplicativo pedir, d√™ a permiss√£o para o Downloader poder instalar o aplicativo.",
        "* Aguarde a instala√ß√£o ser conclu√≠da.",
        "Envie a palavra **TESTE** para enviarmos o seu acesso!"
    ];
};

// 4. TUTORIAL CELULAR ANDROID
const getAndroidCelularInstallTutorial = () => {
    return [
        "üì± Tutorial para Celular Android",
        "Como Instalar o Aplicativo P2P Rush Original", 
        "* Abra o navegador Google Chrome no seu celular.",
        `* Na barra de endere√ßo, digite o seguinte site: ${SITE_RUSH}`,
        "* Na p√°gina que abrir, encontre o aplicativo com o nome P2P Rush Original.", 
        "* Clique no bot√£o Baixar e aguarde o download.",
        "* Quando o download terminar, clique no arquivo baixado para instalar o aplicativo. Se for a primeira vez, pode ser que o celular pe√ßa permiss√£o para instalar de fontes desconhecidas; basta aceitar.",
        "Aguarde um momento para criar seu Acesso!"
    ];
};

// 5. FUN√á√ÉO DE EXTRA√á√ÉO DE NOME (Melhorada)
function extractUserName(req) {
    // 1. Tenta pegar o nome diretamente do par√¢metro da Intent
    const nomeUserParam = req.body.queryResult.parameters && req.body.queryResult.parameters['nomeuser']; 
    if (nomeUserParam) {
        if (typeof nomeUserParam === 'string' && nomeUserParam.length > 0) {
            return nomeUserParam;
        } else if (typeof nomeUserParam === 'object' && (nomeUserParam.name || nomeUserParam.displayName)) {
            return nomeUserParam.name || nomeUserParam.displayName;
        }
    }

    // 2. Tenta pegar o nome do contexto de sa√≠da (se j√° foi capturado)
    if (req.body.queryResult.outputContexts) {
        for (const context of req.body.queryResult.outputContexts) {
            if (context.parameters && context.parameters.nomeuser) {
                const contextNomeUser = context.parameters.nomeuser;
                if (typeof contextNomeUser === 'string' && contextNomeUser.length > 0) {
                    return contextNomeUser;
                } else if (typeof contextNomeUser === 'object' && (contextNomeUser.name || contextNomeUser.displayName)) {
                    return contextNomeUser.name || contextNomeUser.displayName;
                }
            }
        }
    }
    return null; // Retorna nulo se n√£o encontrar
}


// =================================================================
// WEBHOOK PRINCIPAL
// =================================================================
app.post('/webhook', async (req, res) => {
  try {
    const intentName = req.body.queryResult.intent.displayName;
    const queryText = req.body.queryResult.queryText;
    let response = {};
    let fulfillmentText = ""; 

    // Extrai o nome do cliente (do par√¢metro ou do contexto)
    const userName = extractUserName(req);
    
    // =================================================================
    // ***** L√ìGICA DE SAUDA√á√ÉO INICIAL (Default Welcome Intent) *****
    // =================================================================
    if (intentName === "Default Welcome Intent") {
        
        // Se o nome n√£o est√° no contexto, pedimos o nome.
        if (!userName) {
            // Este texto deve ser o mesmo que o Dialogflow usa para pedir o nome.
            fulfillmentText = "Que bom que voc√™ nos procurou! Para darmos continuidade ao seu atendimento, me informe seu nome, por favor. üòä";
        } else {
             // FALLBACK: Se o nome for capturado aqui por algum motivo, mostramos o menu.
            const menuMessages = getPersonalizedMenu(userName);
            fulfillmentText = arrayToFulfillmentText(menuMessages);
        }
        
    }
    
    // =================================================================
    // ***** INTENT DE CAPTURA DE NOME (A SUA INTENT EXISTENTE) *****
    // =================================================================
    else if (intentName === "CAPTURA DE NOME") { 
        
        // Usa o nome capturado na Intent anterior
        let nomeParaSaudacao = userName || "Cliente"; 

        const menuMessages = getPersonalizedMenu(nomeParaSaudacao);
        fulfillmentText = arrayToFulfillmentText(menuMessages);
        
    }


    // ----------------------------------------------------------------
    // 1. INTEN√á√ïES DO MENU PRINCIPAL 
    // ----------------------------------------------------------------
    else if (intentName === "Menu Principal - N1") { 
        // Op√ß√£o 1: Novo Cliente 
        let nomeParaPitch = userName || "Cliente"; 

        const pitchMessages = getVendasPitch(nomeParaPitch, PLAN_VALUE);
        fulfillmentText = arrayToFulfillmentText(pitchMessages);
            
    } else if (intentName === "Menu Principal - N2 - select.number") { 
        // Op√ß√£o 2: Pagamento 
        fulfillmentText = `Para realizar o pagamento ou renovar, √© s√≥ usar a chave PIX abaixo:
Chave PIX: ${PIX_KEY}
Nome: ${PIX_NAME}
Valor: R$ ${PLAN_VALUE}

Assim que voc√™ fizer o pagamento, me envie o comprovante, por favor! üòâ`;

    } else if (intentName === "Menu Principal - N3 - select.number") { 
        // Op√ß√£o 3: Suporte 
        fulfillmentText = `Aguarde um momento, vou encaminhar seu atendimento para o suporte.`;
        
    } else if (intentName === "Suporte - Nome Capturado") { 
        // Esta Intent deve ser acionada ap√≥s o usu√°rio digitar o nome no fluxo de suporte.
        const formattedFirstName = userName ? userName.split(' ')[0].charAt(0).toUpperCase() + userName.split(' ')[0].slice(1).toLowerCase() : "Cliente";
        
        fulfillmentText = `Certo, ${formattedFirstName}. Aguarde um momento, vou encaminhar seu atendimento para o suporte.`;
        
    } else if (intentName === "TESTE") {
        fulfillmentText = `Aguarde um momento...`;

    // ----------------------------------------------------------------
    // 2. FLUXO DE TUTORIAIS
    // ----------------------------------------------------------------
    } else if (intentName === "TUTORIAL SMARTV") {
        const messages = getSmartTVInstallTutorial();
        fulfillmentText = arrayToFulfillmentText(messages);

    } else if (intentName === "TUTORIAL ROKU") {
        const messages = getRokuInstallTutorial();
        fulfillmentText = arrayToFulfillmentText(messages);

    } else if (intentName === "TUTORIAL ANDROIDTV") { 
        const messages = getAndroidTVInstallTutorial();
        fulfillmentText = arrayToFulfillmentText(messages);

    } else if (intentName === "TUTORIAL CELULAR") {
        const messages = getAndroidCelularInstallTutorial();
        fulfillmentText = arrayToFulfillmentText(messages);
        
    } else if (intentName === "Sistemas de Confirma√ß√£o") { 
        
        const lowerQuery = req.body.queryResult.queryText.toLowerCase();

        if (lowerQuery.includes('android') || lowerQuery.includes('google') || lowerQuery.includes('playstore') || lowerQuery.includes('tri√¢ngulo') || lowerQuery.includes('apps google')) {
             const messages = getAndroidTVInstallTutorial(); 
             fulfillmentText = arrayToFulfillmentText(messages);
        
        } else if (lowerQuery.includes('roku') || lowerQuery.includes('streaming') || lowerQuery.includes('roxo') || lowerQuery.includes('canais')) {
             const messages = getRokuInstallTutorial();
             fulfillmentText = arrayToFulfillmentText(messages);
             
        } else {
             fulfillmentText = "N√£o consegui identificar o sistema. Me diga apenas uma palavra: 'Android' ou 'Roku'?";
        }


    // ----------------------------------------------------------------
    // 3. INTEN√á√ïES PADR√ÉO (Fallback/Resto)
    // ----------------------------------------------------------------
    } else if (intentName === "Default Fallback Intent") {
        // *** SMART FALLBACK COM GEMINI ***
        const geminiResponseText = await callGemini(queryText, userName);
        fulfillmentText = geminiResponseText;
        // ********************************
        
    } else {
        fulfillmentText = `Desculpe, n√£o entendi sua mensagem. Por favor, escolha uma das op√ß√µes do menu principal (1Ô∏è‚É£ Novo Cliente, 2Ô∏è‚É£ Pagamento ou 3Ô∏è‚É£ Suporte).`;
    }

    // RESPOSTA FINAL (OBRIGAT√ìRIO PARA O AUTORESPONDER APK)
    response.fulfillmentText = fulfillmentText; 
    res.json(response);

  } catch (error) {
    console.error("Erro na requisi√ß√£o: ", error);
    res.status(500).json({
      "fulfillmentText": `Ocorreu um erro na integra√ß√£o. Por favor, tente novamente.`
    });
  }
});

// Rota de teste
app.get('/', (req, res) => {
    res.send('O bot est√° online e funcionando!');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});
